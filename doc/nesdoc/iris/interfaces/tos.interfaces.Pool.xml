<?xml version="1.0" ?><interfacedef loc="50:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc" nicename="tos.interfaces.Pool" qname="Pool">
      <documentation loc="33:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc">
        <short>
  An allocation pool of a specific type memory objects.</short>
        <long>
  An allocation pool of a specific type memory objects.
  The Pool allows components to allocate (&lt;code&gt;get&lt;/code&gt;)
  and deallocate (&lt;code&gt;put&lt;/code&gt;) elements. The pool
  does not require that deallocations be items which were
  originally allocated. E.g., a program can create two
  pools of the same type and pass items between them.
  This allows, for example, a component to allocate a pool
  of message buffers and freely buffer swap them on
  Receive.receive events.

  @author Philip Levis
  @author Kyle Jamieson
  @date   $Date: 2008-06-04 03:00:31 $
</long>
      </documentation>
      <parameters>
        <typedef loc="50:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc" name="t" ref="0x40c9e280">
          <interfacedef-ref nicename="tos.interfaces.Pool" qname="Pool"/>
          <type-var alignment="U:" size="U:"><typedef-ref name="t" ref="0x40c9e280" scoped=""/></type-var>
        </typedef>
      </parameters>
      <function command="" loc="97:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc" name="get" provided="0" ref="0x40c9df10">
        <documentation loc="91:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>
 Allocate an element from the pool.</short>
          <long>
 Allocate an element from the pool.

 @return 't* ONE_NOK' A pointer if the pool is not empty, NULL if
 the pool is empty.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.interfaces.Pool" qname="Pool"/>
        <type-function alignment="I:1" size="I:1">
          <type-pointer alignment="I:1" size="I:2">
            <type-var alignment="U:" size="U:"><typedef-ref name="t" ref="0x40c9e280" scoped=""/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="80:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc" name="maxSize" provided="0" ref="0x40c9d1a8">
        <documentation loc="74:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>
 Returns the maximum number of elements in the pool
 (the size of a full pool).</short>
          <long>
 Returns the maximum number of elements in the pool
 (the size of a full pool).

 @return Maximum size.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.interfaces.Pool" qname="Pool"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="uint8_t" ref="0x40212b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="61:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc" name="empty" provided="0" ref="0x40c9e720">
        <documentation loc="52:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>
 Returns whether there any elements remaining in the pool.</short>
          <long>
 Returns whether there any elements remaining in the pool.
 If empty returns TRUE, then &lt;code&gt;get&lt;/code&gt; will return
 NULL. If empty returns FALSE, then &lt;code&gt;get&lt;/code&gt; will
 return a pointer to an object.

 @return Whether the pool is empty.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.interfaces.Pool" qname="Pool"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="bool" ref="0x40353b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="89:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc" name="put" provided="0" ref="0x40c9d7b0">
        <documentation loc="82:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>
 Deallocate an object, putting it back into the pool.</short>
          <long>
 Deallocate an object, putting it back into the pool.

 @param 't* ONE newVal'
 @return SUCCESS if the entry was put in successfully, FAIL
 if the pool is full.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.interfaces.Pool" qname="Pool"/>
        <type-function alignment="I:1" size="I:1">
          <type-tag alignment="I:1" size="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x40367210"/>
            <typename><typedef-ref name="error_t" ref="0x4036f340"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer alignment="I:1" size="I:2">
              <type-var alignment="U:" size="U:"><typedef-ref name="t" ref="0x40c9e280" scoped=""/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="89:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc" name="newVal" ref="0x40c9d658">
            <type-pointer alignment="I:1" size="I:2">
              <type-var alignment="U:" size="U:"><typedef-ref name="t" ref="0x40c9e280" scoped=""/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" loc="72:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc" name="size" provided="0" ref="0x40c9ec30">
        <documentation loc="63:/home/user/top/t2_cur/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>
 Returns how many elements are in the pool.</short>
          <long>
 Returns how many elements are in the pool. If size
 returns 0, empty() will return TRUE. If size returns
 a non-zero value, empty() will return FALSE. The
 return value of size is always &amp;lte; the return
 value of maxSize().

 @return How many elements are in the pool.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.interfaces.Pool" qname="Pool"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="uint8_t" ref="0x40212b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>